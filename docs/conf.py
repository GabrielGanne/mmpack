# -*- coding: utf-8 -*-

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
import os
import sys
mmpackbuild_moduledir = [os.environ.get('SRCDIR', '.') + '/src/mmpack-build',
                         os.environ.get('BUILDDIR', '.') + '/src/mmpack-build']
for path in mmpackbuild_moduledir:
    sys.path.insert(0, os.path.abspath(path))

# -- General configuration ------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
import linuxdoc

extensions = [
    'sphinx.ext.todo',
    'linuxdoc.rstFlatTable',    # Implementation of the 'flat-table' reST-directive.
    'linuxdoc.rstKernelDoc',    # Implementation of the 'kernel-doc' reST-directive.
    'linuxdoc.kernel_include',  # Implementation of the 'kernel-include' reST-directive.
    'linuxdoc.manKernelDoc',    # Implementation of the	'kernel-doc-man' builder
    'linuxdoc.cdomain',         # Replacement for the sphinx c-domain.
    'sphinx.ext.autodoc',       # sphinx auto doc 
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'mmpack'
copyright = u'2019, Mindmaze'
author = u'Mindmaze'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'0.0.1'
# The full version, including alpha/beta/rc tags.
release = u'0.0.1-next'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

today_fmt = '%Y-%m-%d'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

primary_domain = 'c'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
import sphinx_rtd_theme
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

html_use_index = True
html_split_index = False
html_search_language = 'en'


# Output file base name for HTML help builder.
htmlhelp_basename = 'mmpack-doc'


# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'mmpack.tex', u'mmpack Documentation',
     u'Nicolas Bourdaud', 'manual'),
]

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'mmpack', u'mmpack Documentation',
    [author], 1)
]

kernel_doc_exp_method = 'attribute'
kernel_doc_exp_ids = 'API_EXPORTED API_EXPORTED_RELOCATABLE LOCAL_SYMBOL'
kernel_doc_known_attrs = 'noreturn'

# In nickpick mode, it will complain about lots of missing references that
#
# 1) are just typedefs like: bool, __u32, etc;
# 2) It will complain for things like: enum, NULL;
# 3) It will complain for symbols that should be on different
#    books (but currently aren't ported to ReST)
#
# The list below has a list of such symbols to be ignored in nitpick mode
#
nitpick_ignore = [
    ("c:type", "bool"),
    ("c:type", "enum"),

    # stdint declarations
    ("c:type", "int8_t"),
    ("c:type", "uint8_t"),
    ("c:type", "int16_t"),
    ("c:type", "uint16_t"),
    ("c:type", "int32_t"),
    ("c:type", "uint32_t"),
    ("c:type", "int64_t"),
    ("c:type", "uint64_t"),

    # some complex types and structures
    ("c:type", "socklen_t"),
    ("c:type", "sockaddr"),
    ("c:type", "addrinfo"),
    ("c:type", "iovec"),
    ("c:type", "timespec"),

    # ignore warnings about variadic arguments
    ("c:type", "ellipsis"), # ...
    ("c:type", "va_list"),

    # ignore warnings about some unknown functions
    ("c:func", "poll"),
    ("c:func", "getaddrinfo"),
    ("c:func", "getnamedinfo"),
    ("c:func", "getsockname"),
    ]
